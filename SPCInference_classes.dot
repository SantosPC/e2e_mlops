digraph "classes" {
rankdir=BT
charset="utf-8"
"SPCInference.config.configuration.ConfigurationManager" [color="black", fontcolor="black", label=<{ConfigurationManager|config<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>|get_data_ingestion_config(): DataIngestionConfig<br ALIGN="LEFT"/>get_evaluation_config(): EvaluationConfig<br ALIGN="LEFT"/>get_prepare_base_model_config(): PrepareBaseModelConfig<br ALIGN="LEFT"/>get_training_config(): TrainingConfig<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SPCInference.components.data_ingestion.DataIngestion" [color="black", fontcolor="black", label=<{DataIngestion|config<br ALIGN="LEFT"/>|download_file(): str<br ALIGN="LEFT"/>extract_zip_file()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SPCInference.entity.config_entity.DataIngestionConfig" [color="black", fontcolor="black", label=<{DataIngestionConfig|local_data_file : Path<br ALIGN="LEFT"/>root_dir : Path<br ALIGN="LEFT"/>source_URL : str<br ALIGN="LEFT"/>unzip_dir : Path<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"SPCInference.pipeline.stage_01_data_ingestion.DataIngestionTrainingPipeline" [color="black", fontcolor="black", label=<{DataIngestionTrainingPipeline|<br ALIGN="LEFT"/>|main()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SPCInference.components.model_evaluation_mlflow.Evaluation" [color="black", fontcolor="black", label=<{Evaluation|config<br ALIGN="LEFT"/>model : NoneType<br ALIGN="LEFT"/>score<br ALIGN="LEFT"/>valid_generator : DirectoryIterator<br ALIGN="LEFT"/>|evaluation()<br ALIGN="LEFT"/>load_model(path: Path): tf.keras.Model<br ALIGN="LEFT"/>log_into_mlflow()<br ALIGN="LEFT"/>save_score()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SPCInference.entity.config_entity.EvaluationConfig" [color="black", fontcolor="black", label=<{EvaluationConfig|all_params : dict<br ALIGN="LEFT"/>mlflow_uri : str<br ALIGN="LEFT"/>params_batch_size : int<br ALIGN="LEFT"/>params_image_size : list<br ALIGN="LEFT"/>path_of_model : Path<br ALIGN="LEFT"/>training_data : Path<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"SPCInference.pipeline.stage_04_model_evaluation.EvaluationPipeline" [color="black", fontcolor="black", label=<{EvaluationPipeline|<br ALIGN="LEFT"/>|main()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SPCInference.pipeline.stage_03_model_trainer.ModelTrainingPipeline" [color="black", fontcolor="black", label=<{ModelTrainingPipeline|<br ALIGN="LEFT"/>|main()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SPCInference.pipeline.prediction.PredictionPipeline" [color="black", fontcolor="black", label=<{PredictionPipeline|filename<br ALIGN="LEFT"/>|predict()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SPCInference.components.prepare_base_model.PrepareBaseModel" [color="black", fontcolor="black", label=<{PrepareBaseModel|config<br ALIGN="LEFT"/>full_model : Model<br ALIGN="LEFT"/>model : Model<br ALIGN="LEFT"/>|get_base_model()<br ALIGN="LEFT"/>save_model(path: Path, model: tf.keras.Model)<br ALIGN="LEFT"/>update_base_model()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SPCInference.entity.config_entity.PrepareBaseModelConfig" [color="black", fontcolor="black", label=<{PrepareBaseModelConfig|base_model_path : Path<br ALIGN="LEFT"/>params_classes : int<br ALIGN="LEFT"/>params_image_size : list<br ALIGN="LEFT"/>params_include_top : bool<br ALIGN="LEFT"/>params_learning_rate : float<br ALIGN="LEFT"/>params_weights : str<br ALIGN="LEFT"/>root_dir : Path<br ALIGN="LEFT"/>updated_base_model_path : Path<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"SPCInference.pipeline.stage_02_prepare_base_model.PrepareBaseModelTrainingPipeline" [color="black", fontcolor="black", label=<{PrepareBaseModelTrainingPipeline|<br ALIGN="LEFT"/>|main()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SPCInference.components.model_trainer.Training" [color="black", fontcolor="black", label=<{Training|config<br ALIGN="LEFT"/>model : NoneType<br ALIGN="LEFT"/>steps_per_epoch<br ALIGN="LEFT"/>train_generator : DirectoryIterator<br ALIGN="LEFT"/>valid_generator : DirectoryIterator<br ALIGN="LEFT"/>validation_steps<br ALIGN="LEFT"/>|get_base_model()<br ALIGN="LEFT"/>save_model(path: Path, model: tf.keras.Model)<br ALIGN="LEFT"/>train()<br ALIGN="LEFT"/>train_valid_generator()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"SPCInference.entity.config_entity.TrainingConfig" [color="black", fontcolor="black", label=<{TrainingConfig|params_batch_size : int<br ALIGN="LEFT"/>params_epochs : int<br ALIGN="LEFT"/>params_image_size : list<br ALIGN="LEFT"/>params_is_augmentation : bool<br ALIGN="LEFT"/>root_dir : Path<br ALIGN="LEFT"/>trained_model_path : Path<br ALIGN="LEFT"/>training_data : Path<br ALIGN="LEFT"/>updated_base_model_path : Path<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"SPCInference.entity.config_entity.DataIngestionConfig" -> "SPCInference.components.data_ingestion.DataIngestion" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="config", style="solid"];
"SPCInference.entity.config_entity.EvaluationConfig" -> "SPCInference.components.model_evaluation_mlflow.Evaluation" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="config", style="solid"];
"SPCInference.entity.config_entity.PrepareBaseModelConfig" -> "SPCInference.components.prepare_base_model.PrepareBaseModel" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="config", style="solid"];
"SPCInference.entity.config_entity.TrainingConfig" -> "SPCInference.components.model_trainer.Training" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="config", style="solid"];
}
